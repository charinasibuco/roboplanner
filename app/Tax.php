<?php

namespace App;

use Carbon\Carbon;
use Illuminate\Database\Eloquent\Model;
use Auth;

class Tax extends Model
{
    //
    protected $fillable = [
        'tax_rate',
        'single_filters_from',
        'single_filters_to',
        'married_filling_jointly_from',
        'married_filling_jointly_to',
        'married_filling_separately_from',
        'married_filling_separately_to',
        'head_of_household_from',
        'head_of_household_to',
        'due_date'
    ];
    public static function boot(){
        parent::boot(); // TODO: Change the autogenerated stub

        static::updating(function($user){
            $user->logs()->attach(Auth::user()->id, ['module_name' => 'Taxes', 'log' => Auth::user()->first_name . ' ' . Auth::user()->last_name . ' is updating ' . $user->name]);
        });

        static::creating(function($user){
            if(Auth::check()){
                $user->logs()->attach(Auth::user()->id, ['module_name' => 'Taxes', 'log' => Auth::user()->first_name . ' ' . Auth::user()->last_name . ' is creating ' . $user->name]);
            }

        });

        static::deleting(function($user){
            $user->logs()->attach(Auth::user()->id, ['module_name' => 'Taxes', 'log' => Auth::user()->first_name . ' ' . Auth::user()->last_name . ' is deleting ' . $user->name]);
        });
    }

    /**
     * Setters methods
     * @param $value
     */
    public function setTaxRateAttribute($value){
        $this->attributes['tax_rate'] = str_replace(['%', ' '], '', $value) / 100;
    }

    public function setSingleFiltersFromAttribute($value){
        $this->attributes['single_filters_from'] = str_replace(['$', ',', ' '], '', $value);
    }

    public function setSingleFiltersToAttribute($value){
        $this->attributes['single_filters_to'] = str_replace(['$', ',', ' '], '', $value);
    }

    public function setMarriedFillingJointlyFromAttribute($value){
        $this->attributes['married_filling_jointly_from'] = str_replace(['$', ',', ' '], '', $value);
    }

    public function setMarriedFillingJointlyToAttribute($value){
        $this->attributes['married_filling_jointly_to'] = str_replace(['$', ',', ' '], '', $value);
    }

    public function setMarriedFillingSeparatelyFromAttribute($value){
        $this->attributes['married_filling_separately_from'] = str_replace(['$', ',', ' '], '', $value);
    }

    public function setMarriedFillingSeparatelyToAttribute($value){
        $this->attributes['married_filling_separately_to'] = str_replace(['$', ',', ' '], '', $value);
    }

    public function setHeadOfHouseholdFromAttribute($value){
        $this->attributes['head_of_household_from'] = str_replace(['$', ',', ' '], '', $value);
    }

    public function setHeadOfHouseholdToAttribute($value){
        $this->attributes['head_of_household_to'] = str_replace(['$', ',', ' '], '', $value);
    }

    public function setDueDateAttribute($value){
        $this->attributes['due_date'] = date('Y-m-d', strtotime($value));
    }

    /**
     * Getters Methods
     * @return string
     */
    public function getTaxRateAttribute(){
    return '%' . round((float) $this->attributes['tax_rate'] * 100 );
}

    public function getSingleFiltersFromAttribute(){
        return '$' . number_format($this->attributes['single_filters_from'], 2);
    }

    public function getSingleFiltersToAttribute(){
        if(is_numeric($this->attributes['single_filters_to'])) {
            return '$' . number_format($this->attributes['single_filters_to'], 2);
        }

        return $this->attributes['single_filters_to'];
    }

    public function getSingleFiltersAttribute(){
        $from       = ($this->attributes['single_filters_from'] != 0) ? '$' . number_format($this->attributes['single_filters_from'], 2) : 'Up';
        $to         = is_numeric($this->attributes['single_filters_to']) ? ' To $'. number_format(  $this->attributes['single_filters_to'], 2) : ' ' . $this->attributes['single_filters_to'];
        return $from . $to;
    }

    public function getMarriedFillingJointlyFromAttribute(){
        return '$' . number_format($this->attributes['married_filling_jointly_from'], 2);
    }

    public function getMarriedFillingJointlyToAttribute(){
        if(is_numeric($this->attributes['married_filling_jointly_to'])) {
            return '$' . number_format($this->attributes['married_filling_jointly_to'], 2);
        }

        return $this->attributes['married_filling_jointly_to'];
    }

    public function getMarriedFillingJointlyAttribute(){
        $from           = ($this->attributes['married_filling_jointly_from'] != 0) ? '$' . number_format($this->attributes['married_filling_jointly_from'], 2) : 'Up';
        $to             = is_numeric($this->attributes['married_filling_jointly_to']) ? ' To $'. number_format($this->attributes['married_filling_jointly_to'], 2) : ' ' . $this->attributes['married_filling_jointly_to'];
        return $from . $to;
    }

    public function getMarriedFillingSeparatelyFromAttribute(){
        return '$' . number_format($this->attributes['married_filling_separately_from'], 2);
    }

    public function getMarriedFillingSeparatelyToAttribute(){
        if(is_numeric($this->attributes['married_filling_separately_to'])) {
            return '$' . number_format($this->attributes['married_filling_separately_to'], 2);
        }

        return $this->attributes['married_filling_separately_to'];
    }

    public function getMarriedFillingSeparatelyAttribute(){
        $from           = ($this->attributes['married_filling_separately_from'] != 0) ? '$' . number_format($this->attributes['married_filling_separately_from'], 2) : 'Up';
        $to             = is_numeric($this->attributes['married_filling_separately_to']) ?  ' To $' . number_format($this->attributes['married_filling_separately_to'], 2) : ' ' .$this->attributes['married_filling_separately_to'];
        return $from . $to;
    }

    public function getHeadOfHouseholdFromAttribute(){
        return '$' . number_format($this->attributes['head_of_household_from'], 2);
    }

    public function getHeadOfHouseholdToAttribute(){
        if(is_numeric($this->attributes['head_of_household_to'])) {
            return '$' . number_format($this->attributes['head_of_household_to'], 2);
        }

        return $this->attributes['head_of_household_to'];
    }

    public function getHeadOfHouseholdAttribute(){
        $from           = ($this->attributes['head_of_household_from'] != 0) ? '$' . number_format($this->attributes['head_of_household_from'], 2) : 'Up';
        $to             = is_numeric($this->attributes['head_of_household_to']) ? ' To $' . number_format($this->attributes['head_of_household_to'], 2) :  ' '.$this->attributes['head_of_household_to'];
        return $from . $to;
    }

    public function getDueDateAttribute()
    {
        return Carbon::parse($this->attributes['due_date']);
    }

    public function logs(){
        return $this->belongsToMany(User::class, 'logs', 'module_id')
            ->withTimestamps()
            ->latest('pivot_updated_at');
    }
}
